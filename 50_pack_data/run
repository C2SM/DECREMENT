#!/bin/bash

# Update job status
update_status "running"

# clean
./clean

# Check if output folder exists
mkdir -p $(readlink output)

export OMP_NUM_THREADS=$CORES_PER_NODE
export CRAY_CUDA_MPS=1
export PMI_NO_PREINITIALIZE=1 # get rid of "[unset]:_pmi_alps_init:alps_get_placement_info returned with error -1"

# Load modules
module load daint-gpu
module load NCO

# Move CLM output files to cesm_output/* directory
mkdir -p ../20_cclm2_c/cesm_output/daily
mkdir -p ../20_cclm2_c/cesm_output/daily_min
mkdir -p ../20_cclm2_c/cesm_output/daily_max
mkdir -p ../20_cclm2_c/cesm_output/monthly
mv ../20_cclm2_c/clm5.0_eur0.1.clm2.h0.*.nc ../20_cclm2_c/cesm_output/daily/
mv ../20_cclm2_c/clm5.0_eur0.1.clm2.h1.*.nc ../20_cclm2_c/cesm_output/daily_min/
mv ../20_cclm2_c/clm5.0_eur0.1.clm2.h2.*.nc ../20_cclm2_c/cesm_output/daily_max/
mv ../20_cclm2_c/clm5.0_eur0.1.clm2.h3.*.nc ../20_cclm2_c/cesm_output/monthly/

# Move CLM restart files to cesm_output/restart directory
mkdir -p ../20_cclm2_c/cesm_output/restart
mv ../20_cclm2_c/clm5.0_eur0.1.clm2.r*.*.nc ../20_cclm2_c/cesm_output/restart
mv ../20_cclm2_c/clm5.0_eur0.1.cpl.r.*.nc ../20_cclm2_c/cesm_output/restart
mv ../20_cclm2_c/clm5.0_eur0.1.datm.rs1.*.bin ../20_cclm2_c/cesm_output/restart

scriptdir=$PWD

# For CLM: Compress and remove originals
# Assuming yearly output files, no need to archive into yearly tarballs
for direc in ${CLM_COMPRESS_DIRS}; do
    echo ${direc}
    mkdir -p $scriptdir/output/${direc}
    
    # compress files
    echo "Compressing files"
    cd $scriptdir/input
    nfiles=0
    nerr=0
    nz_list=""
    for file in ${direc}/clm5.0_eur0.1.clm2.h*.${LM_YYYY_BEGIN}-*.nc; do
        ((nfiles++))
        echo "  $file"
        ofile=../output/${file}
        ncks -4 -L ${PACK_COMPRESS_LEVEL} --no_abc -O ${file} ${ofile}
        status=$?
        [[ -e ${ofile} && $status == 0 ]] && nz_list+=" ${ofile}" || ((nerr++))
    done
    if (( nerr > 0 )); then
        echo "something went wrong when compressing ${nerr}/${nfiles} files, exiting"
        exit 1
    fi

    # remove original files
    if [[ ${PACK_REMOVE_ORIGINAL} == true ]]; then
        echo "removing original files"
        cd $scriptdir/input
        nfiles=0
        nerr=0
        for file in ${direc}/clm5.0_eur0.1.clm2.h*.${LM_YYYY_BEGIN}-*.nc; do
            ((nfiles++))
            rm -f ${file}
            [[ $? != 0 ]] && ((nerr++))
        done
        if (( nerr > 0 )); then
            echo "something went wrong when removing ${nerr}/${nfiles} original files, exiting"
            exit 1
        fi
    fi
done

# FOR COSMO: Compress, archive and remove originals
for direc in ${LM_COMPRESS_DIRS}; do
    echo ${direc}
    mkdir -p $scriptdir/output/${direc}

    cd $scriptdir/input
    nc_list=$(cosmo_file_list "${direc}" ">=" "${LM_BEGIN_DATE}" "<" "${LM_END_DATE}")
    if [[ -n ${nc_list} ]]; then
    
        # compress files
        echo "Compressing files"
        nfiles=0
        nerr=0
        nz_list=""
        for file in ${nc_list}; do
            ((nfiles++))
            echo "  $file"
            ofile=../output/${file%.nc}.nz
            ncks -4 -L ${PACK_COMPRESS_LEVEL} --no_abc -O ${file} ${ofile}
            status=$?
            [[ -e ${ofile} && $status == 0 ]] && nz_list+=" $(basename ${ofile})" || ((nerr++))
        done
        if (( nerr > 0 )); then
            echo "something went wrong when compressing ${nerr}/${nfiles} files, exiting"
            exit 1
        fi

        # create archive
        if [[ ${PACK_CREATE_ARCHIVE} == true ]]; then  
            cd $scriptdir/output/${direc}
            part=$(dirname ${direc})
            stream=$(basename ${direc})
            tar_file="${part}_${stream}_${LM_BEGIN_DATE_DG}-${LM_END_DATE_DG}.tar"
            echo "building archive file ${tar_file}"
            printf '%s\n' ${nz_list} > .nz_list.txt
            tar --transform='s/.nz/.nc/' -cvf ${tar_file} --files-from .nz_list.txt
            status=$?
            if [[ $status != 0 ]]; then
                echo "something went wrong when creating archive, exiting"
                exit $status
            fi

            # remove compressed files only
            if [[ ${PACK_REMOVE_COMPRESSED} == true ]]; then
                echo "removing compressed files"
                cd $scriptdir
                nfiles=0
                nerr=0
                for file in ${nz_list}; do
                    ((nfiles++))
                    rm -f output/${direc}/${file}
                    [[ $? != 0 ]] && ((nerr++))
                done
                if (( nerr > 0 )); then
                    echo "something went wrong when removing ${nerr}/${nfiles} compressed files, exiting"
                    exit 1
                fi
            fi

            # remove compressed and original files
            if [[ ${PACK_REMOVE_ORIGINAL} == true ]]; then
                echo "removing compressed and original files"
                cd $scriptdir
                nfiles=0
                nerr=0
                for file in ${nc_list}; do
                    ((nfiles++))
                    rm -f input/${file}
                    [[ $? != 0 ]] && ((nerr++))
                done
                for file in ${nz_list}; do
                    ((nfiles++))
                    rm -f output/${direc}/${file}
                    [[ $? != 0 ]] && ((nerr++))
                done
                if (( nerr > 0 )); then
                    echo "something went wrong when removing ${nerr}/${nfiles} compressed and original files, exiting"
                    exit 1
                fi
            fi
        else
            # Replace original nc files by compressed files
            echo "replacing original nc files by compressed files"
            cd $scriptdir
            nfiles=0
            nerr=0
            for file in ${nz_list}; do
                ((nfiles++))
                mv output/${direc}/${file} input/${file%.nz}.nc
                [[ $? != 0 ]] && ((nerr++))
            done
            if (( nerr > 0 )); then
                echo "something went wrong when replacing ${nerr}/${nfiles} original nc files by compressed files, exiting"
                exit 1
            fi
        fi
    else
        echo "no nc files found in ${direc} between ${LM_BEGIN_DATE_FR} and ${LM_END_DATE_FR}"
    fi
done

# Update job status
update_status "done"
